name:  create release


on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  version: 1.1.3

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: /home/runner/work/j3colorstretch/j3colorstretch/CHANGES.txt
          draft: true
          prerelease: false

  release_assets:
    name: Upload assets
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, ubuntu-16.04, ubuntu-20.04, macos-latest, macos-11.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: gtk
        if: runner.os == 'Linux'
        run: sudo apt-get install -y libgtk2.0-dev libgtkglext1-dev

      - name: Get opencv
#        if: steps.cache-opencv.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: opencv/opencv
          path: opencv
          token: ${{ github.token }}
          ref: ${{secrets.OPENCV_VERSION}}

      # (eigen?), matrix build, checkout CMakeList.txt in .../static
      - name: Build opencv
#        if: steps.cache-opencv.outputs.cache-hit != 'true'
        run: |
          cd opencv
          mkdir -p build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DWITH_QUIRC=OFF -DBUILD_PROTOBUF=OFF -DWITH_OPENJPEG=OFF -DWITH_OPENEXR=OFF -DWITH_EIGEN=OFF -DBUILD_LIST=core,highgui -DOPENCV_GENERATE_PKGCONFIG=ON -DWITH_WEBP=OFF -DWITH_JASPER=OFF -DWITH_V4L=OFF -DWITH_GSTREAMER=OFF -DWITH_MSMF=OFF -DWITH_AVFOUNDATION=OFF -DWITH_DSHOW=OFF -DWITH_WITH_1394=OFF -DVIDEOIO_ENABLE_PLUGINS=OFF -DOPENCV_DNN_OPENCL=OFF -DBUILD_JAVA=OFF -DOPENCV_GENERATE_PKGCONFIG=ON  -DWITH_FFMPEG=OFF ..
          make
          sudo make install

      - name: j3colorstretch
        run: |
          mkdir -p build
          cd build
          cmake ..
          make
          make package

      - name: unpack
        if: runner.os != 'Linux' 
        run: |
          tar xzvf build/j3colorstretch-${{ env.version }}-Darwin.tar.gz
          zip -r j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip j3colorstretch-1.1.0-Darwin LICENSE README.md LICENSE_opencv
          ls
          pwd

      - name: unpack
        if: runner.os =='Linux' 
        run: |
          tar xzvf build/j3colorstretch-${{ env.version }}-Linux.tar.gz      
          zip -r j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip j3colorstretch-1.1.0-Linux LICENSE README.md LICENSE_opencv

      - name: Upload Release Asset
        if: runner.os =='Linux' 
        id: upload-release-asset-linux 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /home/runner/work/j3colorstretch/j3colorstretch/j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip
          asset_name: j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset
        if: runner.os !='Linux' 
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /Users/runner/work/j3colorstretch/j3colorstretch/j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip
          asset_name: j3colorstretch-${{ env.version }}-${{ matrix.os }}.zip
          asset_content_type: application/zip

